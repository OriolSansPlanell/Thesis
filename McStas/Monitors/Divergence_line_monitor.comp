/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Divergence_line_monitor
*
* %I
* Written by: Kim Lefmann
* Date: Nov. 11, 1998
* Origin: Risoe
*
* Horizontal+vertical divergence monitor.
*
* %D
* A divergence sensitive monitor. The counts are distributed in
* (n times m) pixels.
*
* Example: Divergence_line_monitor(nh=20, nv=20, filename="Output.pos",
*           xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
*           maxdiv_h=2, maxdiv_v=2)
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]             Lower x bound of detector opening 
* xmax: [m]             Upper x bound of detector opening 
* ymin: [m]             Lower y bound of detector opening 
* ymax: [m]             Upper y bound of detector opening
* ycoord: [m]           Coordinate of Y to evaluate 
* xwidth: [m]           Width of detector. Overrides xmin, xmax 
* yheight: [m]          Height of detector. Overrides ymin, ymax 
* nv: [1]               Number of pixel columns 
* nh: [1]               Number of pixel rows 
* nx: [1]               
* ny: [1]               Vector definition of "forward" direction wrt. divergence, to be used e.g. when the monitor is rotated into the horizontal plane 
* nz: [1]               
* maxdiv_v: [degrees]   Maximal vertical divergence detected 
* maxdiv_h: [degrees]   Maximal horizontal divergence detected 
* filename: []          Name of file in which to store the detector image text
* restore_neutron: [1]  If set, the monitor does not influence the neutron state 
* nowritefile: [1]      If set, monitor will skip writing to disk
*
* OUTPUT PARAMETERS:
*
* Div_N: []             Array of neutron counts
* Div_p: []             Array of neutron weight counts
* Div_p2: []            Array of second moments
*
* %E
*******************************************************************************/
DEFINE COMPONENT Divergence_line_monitor
DEFINITION PARAMETERS (nh=20, nv=20)
SETTING PARAMETERS (string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, ycoord=0,
xwidth=0, yheight=0, maxdiv_h=2, maxdiv_v=2, restore_neutron=0, nx=0, ny=0, nz=1, int nowritefile=0)
OUTPUT PARAMETERS (Div_N, Div_p, Div_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */
DECLARE
%{
double Div_N[nh];
double Div_p[nh];
double Div_p2[nh];
%}
INITIALIZE
%{
  int i,j;

  if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
  if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

  if ((xmin >= xmax) || (ymin >= ymax)) {
    printf("ERROR: (%s): Null detection area! Aborting.\n", NAME_CURRENT_COMP);
    exit(-1);
  }

  NORM(nx,ny,nz);
%}
TRACE
  %{
    int i,j;
    double h_div, v_div;
    double v, vn;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
      /* Find length of projection onto the [nx ny nz] axis */
      vn = scalar_prod(vx, vy, vz, nx, ny, nz);
      h_div = RAD2DEG*atan2(vx,vn);
      v_div = RAD2DEG*atan2(vy,vn);
      if (h_div < maxdiv_h && h_div > -maxdiv_h &&
          v_div < maxdiv_v && v_div > -maxdiv_v)
      {
        i = floor((fabs(h_div)*nh)/(maxdiv_h));
        
          Div_N[i] ++;
          Div_p[i] ++;
          Div_p2[i] += p*p;
          
        SCATTER;
      }
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    if (!nowritefile) {
    DETECTOR_OUT_1D(
        "horizontal divergence monitor",
        "horizontal divergence [deg]",
        "Intensity",
        "divergence", -maxdiv_h, maxdiv_h, nh,
        &Div_N[0],&Div_p[0],&Div_p2[0],
        filename);
    }
  %}

MCDISPLAY
  %{
    
    multiline(5, (double)xmin, (double)ymin, 0.0,
                 (double)xmax, (double)ymin, 0.0,
                 (double)xmax, (double)ymax, 0.0,
                 (double)xmin, (double)ymax, 0.0,
                 (double)xmin, (double)ymin, 0.0);
%}

END
